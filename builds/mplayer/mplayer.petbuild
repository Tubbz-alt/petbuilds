# mplayer
# Builds from https://github.com/puppylinux-woof-CE/petbuilds

. ../func
. ../build.conf


#mplayer-checkout-snapshot.tar.bz2
TODAY=$(date +%y%m%d)
#TODAY_VER=$(date +%Y-%m-%d)
TODAY_VER=$(ls|grep export|sed 's/mplayer\-export\-//')
URL=http://www.mplayerhq.hu/MPlayer/releases
PKG=mplayer
#SRC=mplayer-export
SRC=mplayer-checkout
SVER=snapshot
VER=$TODAY
COMP=tar.bz2
DESC="Media player for audio and video"
DEPS=+ffmpeg
CAT=Multimedia
DESKTOP=mplayer-export.desktop
CWD=$(pwd)
[ -z "$MWD" ] && MWD=$(dirname $CWD)	

ARCH=$(uname -m)
case $ARCH in
 *64) LIBDIR=lib64 ;;
 *) LIBDIR=lib ;;
esac

build() {
	mv ${SRC}-${TODAY_VER} ${PKG}-${VER}
	cd ${PKG}-${VER}
	# the idea here is that we try shared ffmpeg first, on failure use static
	x=1
	while [ "$x" -lt 3 ];do
		[ "$x" -eq 1 ] && opt=--disable-ffmpeg_a || opt=
			./configure --prefix=/usr \
				--enable-runtime-cpudetection \
				--confdir=/etc \
				--disable-mencoder $opt
			[ "$?" -eq 0 ] && break
			sed -i 's%read tmp%sleep 3%' ./configure
			echo
			echo "Failure :(, but we try again with static ffmpeg"
			echo
			echo "Don't worry, cloning might take a while..."
			echo
		x=$(($x + 1))
	done
		
	make $MKFLG
	[ "$?" -eq 0 ] || exit
	make DESTDIR=$CWD/${PKG}-install install
	cd -
}
	
package() {
	get_files ${PKG}-install ${PKG}-${VER}-${ARCH}
	(cd ${PKG}-${VER}; $MWD/split.sh ../${PKG}-install)
	# add this recipe
	install -d -m 0755 ./${PKG}-${VER}-${ARCH}/usr/share/doc
	cat ${PKG}.petbuild > ./${PKG}-${VER}-${ARCH}/usr/share/doc/${PKG}-build-recipe
	if [ -f "$DESKTOP" ];then
		install -d -m 0755 ./${PKG}-${VER}-${ARCH}/usr/share/applications
		cat $DESKTOP > ./${PKG}-${VER}-${ARCH}/usr/share/applications/$DESKTOP
	fi
	# delete any icon cache or library cache
	find ./${PKG}-${VER}-${ARCH} -type f -name '*cache' -delete
	[ -f ./pinstall.sh ] && install -m 0755 pinstall.sh ./${PKG}-${VER}-${ARCH}/
	[ -f ./puninstall.sh ] && install -m 0755 puninstall.sh ./${PKG}-${VER}-${ARCH}/
	for p in $(ls|grep "\-${ARCH}"|grep -v "files$") ; do
		case $p in
			*_DEV*) DESC="$PKG development"; DEPS=+${PKG} ;;
			*_DOC*) DESC="$PKG documentation"; DEPS=+${PKG} ;;
			*_NLS*) DESC="$PKG locales"; DEPS=+${PKG} ;;
		esac	
		echo "packaging $p"	
		dir2pet -x -s -w="$DESC" -d="$DEPS" -c="$CAT" -p=${p} 2>&1 >/dev/null
		rm -r $p
		mv ${p}.pet ../0pets_out
	done
	rm -r ${PKG}-install
	rm -r ${PKG}-${VER}
	mv -f *.files ../0logs
	echo "done!"
}

# main
retrieve ${SRC}-${SVER}.${COMP}
extract ${SRC}-${SVER}.${COMP}
build
package	
